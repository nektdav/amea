
from flask import Flask, render_template, request, redirect, url_for, flash
from flask_sqlalchemy import SQLAlchemy
from flask_wtf import FlaskForm, RecaptchaField
from wtforms import StringField, IntegerField, TextAreaField, FileField, SubmitField
from wtforms.validators import DataRequired
from werkzeug.utils import secure_filename
import os
import uuid

app = Flask(__name__)
app.config['SECRET_KEY'] = 'supersecretkey'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///applications.db'
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 15 * 1024 * 1024  # Αλλάζουμε το όριο σε 15MB
app.config['RECAPTCHA_PUBLIC_KEY'] = '6LdYMU8rAAAAAK798W17QKMjPoW6bwWnBydJ3pdO'
app.config['RECAPTCHA_PRIVATE_KEY'] = '6LdYMU8rAAAAAGX1F6rRkAuQCzaKGKf3j0NrDanw'

db = SQLAlchemy(app)

ALLOWED_EXTENSIONS = {'pdf', 'docx', 'doc', 'png', 'jpg', 'jpeg'}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

class Application(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(150))
    age = db.Column(db.Integer)
    description = db.Column(db.Text)
    filename = db.Column(db.String(300))

class ApplicationForm(FlaskForm):
    name = StringField('Όνομα', validators=[DataRequired()])
    age = IntegerField('Ηλικία', validators=[DataRequired()])
    description = TextAreaField('Περιγραφή', validators=[DataRequired()])
    file1 = FileField('Αρχείο 1', validators=[DataRequired()])
    file2 = FileField('Αρχείο 2', validators=[DataRequired()])
    file3 = FileField('Αρχείο 3', validators=[DataRequired()])
    # recaptcha = RecaptchaField()
    submit = SubmitField('Υποβολή')

with app.app_context():
    db.create_all()

@app.route('/', methods=['GET', 'POST'])
def form():
    form = ApplicationForm()
    error_message = None
    if form.validate_on_submit():
        files = [form.file1.data, form.file2.data, form.file3.data]
        total_size = 0
        filenames = []
        
        # Υπολογισμός συνολικού μεγέθους αρχείων
        for file in files:
            if file and allowed_file(file.filename):
                file_size = len(file.read())
                total_size += file_size
                file.seek(0)
            else:
                error_message = 'Μη αποδεκτός τύπος αρχείου.'
                return render_template('form.html', form=form, error_message=error_message)
        
        # Έλεγχος συνολικού μεγέθους
        if total_size > 15 * 1024 * 1024:
            error_message = 'Το συνολικό μέγεθος των αρχείων ξεπερνά τα 15MB.'
            return render_template('form.html', form=form, error_message=error_message)
        
        for file in files:
            filename = secure_filename(f"{uuid.uuid4().hex}_{file.filename}")
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
            file.save(filepath)
            filenames.append(filename)
        
        new_app = Application(
            name=form.name.data,
            age=form.age.data,
            description=form.description.data,
            filename=', '.join(filenames)
        )
        db.session.add(new_app)
        db.session.commit()
        flash('Η αίτηση υποβλήθηκε επιτυχώς!', 'success')
        return redirect(url_for('form'))
    elif request.method == 'POST':
        error_message = 'Σφάλμα στη συμπλήρωση της φόρμας ή reCAPTCHA.'
    return render_template('form.html', form=form, error_message=error_message)

@app.route('/applications')
def applications():
    all_apps = Application.query.all()
    return render_template('applications.html', apps=all_apps)

if __name__ == '__main__':
    app.run(debug=True)
